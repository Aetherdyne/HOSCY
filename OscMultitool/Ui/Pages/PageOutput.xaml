<Page x:Class="Hoscy.Ui.Pages.PageOutput"
      x:ClassModifier="internal"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Hoscy"
      xmlns:ui="clr-namespace:Hoscy.Ui"
      mc:Ignorable="d" 
      d:DesignHeight="4500" d:DesignWidth="800"
      Title="PageOutput">

    <ScrollViewer Margin="16,8,8,8" VerticalScrollBarVisibility="Auto">
        <StackPanel Margin="0,0,32,0">
            <WrapPanel>
                <Label Content="Textbox" Style="{StaticResource HLabelL}"/>
                <Button Content="Skip Current Queue" HorizontalAlignment="Left" VerticalAlignment="Center" Click="Button_SkipBox"/>
            </WrapPanel>

            <!-- Textbox -->
            <StackPanel Style="{StaticResource HStackIndent}">
                <!-- Message Timeout -->
                <Label Content="Message Timeout" Style="{StaticResource HLabelM}"/>

                <StackPanel Style="{StaticResource HStackIndent}">
                    <CheckBox x:Name="textboxDynamicTimeout" Content="Enable dynamic timeout" IsChecked="{Binding Textbox.DynamicTimeout, Source={x:Static local:Config.Data}}" Click="TextboxDynamicTimeout_Checked"/>

                    <StackPanel x:Name="optionDynamicTimeout" Margin="0,4,0,0">
                        <WrapPanel>
                            <TextBox Style="{StaticResource HTextBoxShort}" Tag="Timeout...">
                                <TextBox.Text>
                                    <Binding Source="{x:Static local:Config.Data}" Path="Textbox.TimeoutMultiplier" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ui:IntegerValidationRule Min="250" Max="10000"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Label Content ="Dynamic timeout (ms/20char)" VerticalAlignment="Center"/>
                        </WrapPanel>
                        <WrapPanel Margin="0,4,0,0">
                            <TextBox Style="{StaticResource HTextBoxShort}" Tag="Timeout...">
                                <TextBox.Text>
                                    <Binding Source="{x:Static local:Config.Data}" Path="Textbox.MinimumTimeout" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ui:IntegerValidationRule Min="1000" Max="30000"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Label Content ="Minimum timeout (ms)" VerticalAlignment="Center"/>
                        </WrapPanel>
                    </StackPanel>

                    <WrapPanel x:Name="optionDefaultTimeout" Margin="0,4,0,0">
                        <TextBox Tag="Timeout..." Style="{StaticResource HTextBoxShort}">
                            <TextBox.Text>
                                <Binding Source="{x:Static local:Config.Data}" Path="Textbox.DefaultTimeout" UpdateSourceTrigger="PropertyChanged">
                                    <Binding.ValidationRules>
                                        <ui:IntegerValidationRule Min="1000" Max="30000"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <Label Content="Default timeout (ms)" VerticalAlignment="Center"/>
                    </WrapPanel>
                </StackPanel>
                
                <!-- Visibility / Sound -->
                <Label Margin="0,16,0,0" Content="Visibility / Sound" Style="{StaticResource HLabelM}"/>

                <StackPanel Style="{StaticResource HStackIndent}">

                    
                    
                    <Label Content="Visibility"/>

                    <StackPanel Style="{StaticResource HStackIndent}">
                        <CheckBox Content="Clear automatically after messages" IsChecked="{Binding Textbox.AutomaticClearMessage, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Margin="0,4,0,0" Content="Clear automatically after notifications" IsChecked="{Binding Textbox.AutomaticClearNotification, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Margin="0,4,0,0" Content="Typing indicator without Textbox" IsChecked="{Binding Textbox.UseIndicatorWithoutBox, Source={x:Static local:Config.Data}}"/>

                        <WrapPanel Margin="0,4,0,0">
                            <TextBox Tag="MTL..." Style="{StaticResource HTextBoxShort}">
                                <TextBox.Text>
                                    <Binding Source="{x:Static local:Config.Data}" Path="Textbox.MaxLength" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ui:IntegerValidationRule Min="50" Max="130"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Label Content="Max. text length" VerticalAlignment="Center"/>
                        </WrapPanel>
                        
                        <TextBlock Style="{DynamicResource HTextBlock}" Text="Notification Text" Margin="0,4,0,0"/>
                        <WrapPanel>
                            <TextBox Tag="Left..." Style="{StaticResource HTextBoxTiny}">
                                <TextBox.Text>
                                    <Binding Source="{x:Static local:Config.Data}" Path="Textbox.NotificationIndicatorLeft" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ui:StringValidationRule Min="0" Max="3"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Label Content=" Text " VerticalAlignment="Center"/>
                            <TextBox Tag="Right..." Style="{StaticResource HTextBoxTiny}">
                                <TextBox.Text>
                                    <Binding Source="{x:Static local:Config.Data}" Path="Textbox.NotificationIndicatorRight" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ui:StringValidationRule Min="0" Max="3"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </WrapPanel>
                    </StackPanel>

                    <Label Margin="0,8,0,0" Content="Sound"/>

                    <StackPanel Style="{StaticResource HStackIndent}">
                        <CheckBox Content="Sound on Message" IsChecked="{Binding Textbox.SoundOnMessage, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Content="Sound on Notification" Margin="0,4,0,0" IsChecked="{Binding Textbox.SoundOnNotification, Source={x:Static local:Config.Data}}"/>
                    </StackPanel>

                    <Label Margin="0,8,0,0" Content="Notification Overriding"/>

                    <StackPanel Style="{StaticResource HStackIndent}">
                        <CheckBox Content="Do not override higher priority notifications" IsChecked="{Binding Textbox.UseNotificationPriority, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Margin="0,4,0,0" Content="Skip notification timeout if messages available" IsChecked="{Binding Textbox.UseNotificationSkip, Source={x:Static local:Config.Data}}"/>
                    </StackPanel>
                </StackPanel>

                <!-- Extras -->
                <Label Margin="0,16,0,0" Content="Extra Options" Style="{StaticResource HLabelM}"/>

                <StackPanel Style="{StaticResource HStackIndent}">
                    <WrapPanel>
                        <Label Content="Media Status"/>
                        <Button Content="Media Filter" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource HButtonSmall}" Click="Button_ModifyMediaFilter"/>
                    </WrapPanel>

                    <StackPanel Style="{StaticResource HStackIndent}">
                        <CheckBox Content="Show media status" IsChecked="{Binding Textbox.MediaShowStatus, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Content="Swap artist and song name" Margin="0,4,0,0" IsChecked="{Binding Textbox.MediaSwapArtistAndSong, Source={x:Static local:Config.Data}}" IsEnabled="{Binding Textbox.MediaShowStatus, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Content="Also display album name" Margin="0,4,0,0" IsChecked="{Binding Textbox.MediaAddAlbum, Source={x:Static local:Config.Data}}" IsEnabled="{Binding Textbox.MediaShowStatus, Source={x:Static local:Config.Data}}"/>

                        <TextBlock Style="{DynamicResource HTextBlock}" IsEnabled="{Binding Textbox.MediaShowStatus, Source={x:Static local:Config.Data}}" Text="Text Configuration" Margin="0,8,0,4"/>
                        <WrapPanel IsEnabled="{Binding Textbox.MediaShowStatus, Source={x:Static local:Config.Data}}">
                            <TextBox Tag="Playing..." Style="{StaticResource HTextBoxShort}">
                                <TextBox.Text>
                                    <Binding Source="{x:Static local:Config.Data}" Path="Textbox.MediaPlayingVerb" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ui:StringValidationRule Min="1" Max="999"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Label Content=" 'Song' " VerticalAlignment="Center"/>

                            <TextBox Tag="by..." Style="{StaticResource HTextBoxTiny}">
                                <TextBox.Text>
                                    <Binding Source="{x:Static local:Config.Data}" Path="Textbox.MediaArtistVerb" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <ui:StringValidationRule Min="1" Max="999"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <Label Content=" 'Artist' " VerticalAlignment="Center"/>

                            <WrapPanel IsEnabled="{Binding Textbox.MediaAddAlbum, Source={x:Static local:Config.Data}}">
                                <TextBox Tag="on..." Style="{StaticResource HTextBoxTiny}">
                                    <TextBox.Text>
                                        <Binding Source="{x:Static local:Config.Data}" Path="Textbox.MediaAlbumVerb" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <ui:StringValidationRule Min="1" Max="999"/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Label Content=" 'Album'" VerticalAlignment="Center"/>
                            </WrapPanel>
                        </WrapPanel>

                        <WrapPanel Margin="0,4,0,0" IsEnabled="{Binding Textbox.MediaShowStatus, Source={x:Static local:Config.Data}}">
                            <TextBox HorizontalAlignment="Left" Text="{Binding Textbox.MediaExtra, Source={x:Static local:Config.Data}}" Tag="Extra text..." Style="{StaticResource HTextBoxShort}"/>
                            <Label Content="(Extra text)" VerticalAlignment="Center"/>
                        </WrapPanel>
                    </StackPanel>

                    <Label Margin="0,8,0,0" Content="API Related"/>

                    <StackPanel Style="{StaticResource HStackIndent}">
                        <CheckBox Content="Apply translation to textbox" IsChecked="{Binding Api.TranslateTextbox, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Content="Apply original after translation" Margin="0,4,0,0" IsChecked="{Binding Api.AddOriginalAfterTranslate, Source={x:Static local:Config.Data}}" IsEnabled="{Binding Api.TranslateTextbox, Source={x:Static local:Config.Data}}"/>
                    </StackPanel>

                    <Label Margin="0,8,0,0" Content="Others"/>

                    <StackPanel Style="{StaticResource HStackIndent}">
                        <CheckBox Content="Show counter notifications" IsChecked="{Binding Osc.ShowCounterNotifications, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Content="Show AFK status" IsChecked="{Binding Osc.ShowAfkDuration, Source={x:Static local:Config.Data}}" Margin="0,4,0,0"/>
                    </StackPanel>
                </StackPanel>
            </StackPanel>

            <WrapPanel Margin="0,32,0,0">
                <Label Content="Text to Speech" Style="{StaticResource HLabelL}"/>
                <Button Content="Reload TTS" HorizontalAlignment="Left" VerticalAlignment="Center" Click="Button_ReloadSynthesizer"/>
                <Button Content="Skip Current Speech" Click="Button_SkipSpeech" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="8,0,0,0"/>
            </WrapPanel>

            <!-- STT -->
            <StackPanel Style="{StaticResource HStackIndent}">
                <!-- Audio Options -->
                <Label Content="Audio Options" Style="{StaticResource HLabelM}"/>

                <StackPanel Style="{StaticResource HStackIndent}">
                    <WrapPanel>
                        <ComboBox x:Name="speechSpeakerBox" Style="{StaticResource HSettingsComboBox}" SelectionChanged="SpeechSpeakerBox_SelectionChanged"/>
                        <Label Content="Output speakers" VerticalAlignment="Center"/>
                        <Button Style="{StaticResource HButtonSmall}" Content="Reset" VerticalAlignment="Center" Click="Button_ResetDevice" Margin="4,0,0,0"/>
                    </WrapPanel>

                    <WrapPanel Margin="0,4,0,0">
                        <ComboBox x:Name="speechWindowsSynthBox" Style="{StaticResource HSettingsComboBox}" SelectionChanged="SpeechWindowsSynthBox_SelectionChanged"/>
                        <Label Content="Speech voice" VerticalAlignment="Center"/>
                    </WrapPanel>

                    <WrapPanel Margin="0,4,0,0">
                        <Slider Width="320" x:Name="volumeSlider" VerticalAlignment="Center" Minimum="0" Maximum="1" Value="{Binding Speech.SpeakerVolume, Source={x:Static local:Config.Data}}" ValueChanged="Slider_Volume" LargeChange="0.25" SmallChange="0.05" TickFrequency="0.05" IsSnapToTickEnabled="True" Height="17" FontSize="18" FontFamily="Microsoft YaHei UI"/>
                        <Label x:Name="volumeLabel" Content="Speech volume"/>
                    </WrapPanel>
                </StackPanel>

                <!-- Other Options -->
                <Label Content="Other Options" Style="{StaticResource HLabelM}" Margin="0,16,0,0"/>
                <StackPanel Style="{StaticResource HStackIndent}">
                    <WrapPanel>
                        <TextBox VerticalAlignment="Center" Style="{StaticResource HTextBoxShort}" Tag="MTL...">
                            <TextBox.Text>
                                <Binding Source="{x:Static local:Config.Data}" Path="Speech.MaxLenTtsString" UpdateSourceTrigger="PropertyChanged">
                                    <Binding.ValidationRules>
                                        <ui:IntegerValidationRule Min="1" Max="99999"/>
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>
                        <Label Content="Max. text length" VerticalAlignment="Center"/>
                    </WrapPanel>
                    <CheckBox Content="Skip too long messages" Margin="0,4,0,0" IsChecked="{Binding Speech.SkipLongerMessages, Source={x:Static local:Config.Data}}"/>

                    <Label Margin="0,8,0,0" Content="API Options"/>

                    <StackPanel Style="{StaticResource HStackIndent}">
                        <CheckBox Content="Use Azure TTS" IsChecked="{Binding Api.UseAzureTts, Source={x:Static local:Config.Data}}"/>
                        <CheckBox Content="Apply translation to text-to-speech" Margin="0,4,0,0" IsChecked="{Binding Api.TranslateTts, Source={x:Static local:Config.Data}}"/>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </StackPanel>
    </ScrollViewer>
</Page>
